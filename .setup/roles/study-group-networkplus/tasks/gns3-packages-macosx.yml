---
# ==============
# GNS3
# ==============
- name: Test if GNS3 is already installed
  stat:
    path: "{{ gns3_mac_plist }}"
  register: installed_gns3
  changed_when: false
- name: Check the version of GNS3 if already installed
  command: sed -n -e '/<key>CFBundleShortVersionString<\/key>/{n;s/^.*<string>\(.*\)<\/string>.*$/\1/;p;}' {{ gns3_mac_plist }}
  args:
    warn: false
  changed_when: false
  failed_when: false
  register: installed_gns3_version
  when: installed_gns3.stat.exists
- name: Download GNS3 disk image
  get_url:
    url: "{{ gns3_mac_dmg_url }}"
    dest: "{{ downloads }}/{{ gns3_mac_dmg }}"
    mode: 0644
    checksum: "{{ gns3_mac_dmg_checksum }}"
  when: installed_gns3.stat.exists is false or (installed_gns3_version.stdout != gns3_version)
- name: Mount the GNS3 disk image file
  command: hdiutil attach "{{ downloads }}/{{ gns3_mac_dmg }}"
  become: yes
  changed_when: false
  when: installed_gns3.stat.exists is false or (installed_gns3_version.stdout != gns3_version)
- name: Ensure previous version of GNS3 is removed if we are upgrading
  file:
    path: "{{ gns3_app }}"
    state: absent
  become: yes
  when: installed_gns3.stat.exists is true and (installed_gns3_version.stdout != gns3_version)
- name: Install GNS3.app
  command: cp -R "{{ gns3_mac_dmg_mount_path }}/GNS3.app" /Applications
  become: yes
  when: installed_gns3.stat.exists is false or (installed_gns3_version.stdout != gns3_version)
- name: Unmount the GNS3 disk image file
  command: hdiutil detach "{{ gns3_mac_dmg_mount_path }}"
  become: yes
  changed_when: false
  when: installed_gns3.stat.exists is false or (installed_gns3_version.stdout != gns3_version)
- name: Ensure ownership and mode of ubridge are correct
  file:
    path: "{{ gns3_app }}/Contents/MacOS/ubridge"
    owner: root
    mode: 04750
  become: yes
- name: Ensure user config directory for GNS3 exists
  file:
    path: "{{ gns3_config_dir }}"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: staff
    mode: 0755
#- name: Update GNS3 configuration files
#  template:
#    src: "{{ item }}.j2"
#    dest: "{{ gns3_config_dir }}/{{ item }}.conf"
#    mode: 0644
#  with_items:
#    - "gns3_gui"
#    - "gns3_server"
#    - "gns3_controller"
#  vars:
#    gns3_bin_dir: "/Applications/GNS3.app/Contents/MacOS"
#    gns3_server_host: "192.168.56.1"
#    gns3_server_port: "8000"
#    gns3_server_path: "/Applications/GNS3.app/Contents/MacOS/gns3server"
#    gns3_gui_hdpi: "true"
#    gns3_gui_serial_console_command: "/usr/bin/osascript -e 'tell application \"terminal\" to do script with command \"stty raw; nc -U \\\"%s\\\"; exit\"'"
#    gns3_gui_spice_console_command: "/Applications/RemoteViewer.app/Contents/MacOS/RemoteViewer spice://%h:%p"
#    gns3_gui_telnet_command: "osascript -e 'set posix_path to do shell script \"echo \\\"$PATH\\\"\"' -e 'tell application \"Terminal\"' -e 'activate' -e 'do script \"echo -n -e \\\"\\\\033]0;%d\\\\007\\\"; clear; PATH=\" & quoted form of posix_path & \" telnet %h %p ; exit\"' -e 'end tell'"
#    gns3_gui_vnc_command: "osascript -e 'tell application \"Screen Sharing\"' -e '   display dialog \"WARNING OSX VNC support is limited if you have trouble connecting to a device please use an alternative client like Chicken of the VNC.\" buttons {\"OK\"} default button 1 with icon caution with title \"GNS3\"' -e '  open location \"vnc://%h:%p\"' -e 'end tell'"
#    gns3_pcap_reader_command: "tail -f -c +0 %c | /Applications/Wireshark.app/Contents/MacOS/Wireshark -o \"gui.window_title:%d\" -k -i -"
#    vboxmanage_path: "/Applications/VirtualBox.app/Contents/MacOS/VBoxManage"
#- name: Ensure directory for IOS images exists
#  file:
#    path: "{{ gns3_user_dir }}/images"
#    state: directory
#    mode: 0755
#- name: Ensure directory for IOS symbols exists
#  file:
#    path: "{{ gns3_user_dir }}/symbols"
#    state: directory
#    mode: 0755
# ==============
# GNS3.VM.VirtualBox
# ==============
- name: Test if GNS3.VM.VirtualBox is already installed
  command: "VBoxManage showvminfo 'GNS3 VM'"
  register: installed_gns3vm
  changed_when: false
  failed_when: false
- name: Download the GNS3.VM.VirtualBox zip file
  get_url:
    url: "{{ gns3vm_vbox_zip_url }}"
    dest: "{{ downloads }}/{{ gns3vm_vbox_zip }}"
    mode: 0644
    checksum: "{{ gns3vm_vbox_zip_checksum }}"
  when: installed_gns3vm.rc != 0
- name: Unzip the GNS3.VM.VirtualBox zip file
  command: unzip -o -u {{ downloads }}/{{ gns3vm_vbox_zip }}
  args:
    chdir: "{{ downloads }}"
    warn: false
    creates: "{{ downloads }}/GNS3 VM.ova"
  when: installed_gns3vm.rc != 0
- name: Import GNS3.VM ova file into VirtualBox
  command: "VBoxManage import '{{ downloads }}/GNS3 VM.ova' --vsys 0 --vmname 'GNS3 VM'" 
  when: installed_gns3vm.rc != 0
# ==============
# Wireshark
# ==============
- name: Test if Wireshark is already installed
  stat:
    path: "{{ wireshark_app }}"
  register: installed_wireshark
  changed_when: false
- name: Check the version of Wireshark if already installed
  command: sed -n -e '/<key>CFBundleShortVersionString<\/key>/{n;s/^.*<string>\(.*\)<\/string>.*$/\1/;p;}' {{ wireshark_mac_plist }}
  args:
    warn: false
  changed_when: false
  failed_when: false
  register: installed_wireshark_version
  when: installed_wireshark.stat.exists
- name: Download wireshark disk image
  get_url:
    url: "{{ wireshark_mac_dmg_url }}"
    dest: "{{ downloads }}/{{ wireshark_mac_dmg }}"
    mode: 0644
    checksum: "{{ wireshark_mac_dmg_checksum }}"
  when: installed_wireshark.stat.exists is false or (installed_wireshark_version.stdout != wireshark_version)
- name: Mount the wireshark disk image file
  command: hdiutil attach "{{ downloads }}/{{ wireshark_mac_dmg }}"
  become: yes
  changed_when: false
  when: installed_wireshark.stat.exists is false or (installed_wireshark_version.stdout != wireshark_version)
- name: Ensure previous version of Wireshark is removed if we are upgrading
  file:
    path: "{{ wireshark_app }}"
    state: absent
  become: yes
  when: installed_wireshark.stat.exists is true and (installed_wireshark_version.stdout != wireshark_version)
- name: Install Wireshark.app
  command: cp -R "{{ wireshark_mac_dmg_mount_path }}/Wireshark.app" /Applications
  become: yes
  when: installed_wireshark.stat.exists is false or (installed_wireshark_version.stdout != wireshark_version)
- name: Install ChmodBPF
  command: installer -pkg "{{ wireshark_mac_dmg_mount_path }}/Install ChmodBPF.pkg" -target /
  become: yes
  ignore_errors: true
  when: installed_wireshark.stat.exists is false or (installed_wireshark_version.stdout != wireshark_version)
- name: Add Wireshark to system path
  command: installer -pkg "{{ wireshark_mac_dmg_mount_path }}/Add Wireshark to the system path.pkg" -target /
  become: yes
  ignore_errors: true
  when: installed_wireshark.stat.exists is false or (installed_wireshark_version.stdout != wireshark_version)
- name: Unmount wireshark image
  command: hdiutil detach "{{ wireshark_mac_dmg_mount_path }}"
  become: yes
  changed_when: false
  when: installed_wireshark.stat.exists is false or (installed_wireshark_version.stdout != wireshark_version)
